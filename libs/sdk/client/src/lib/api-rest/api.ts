/* tslint:disable */
/* eslint-disable */
/**
 * Bull API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface CheckEmailResponse
 */
export interface CheckEmailResponse {
  /**
   *
   * @type {CheckEmailResponseData}
   * @memberof CheckEmailResponse
   */
  data: CheckEmailResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof CheckEmailResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof CheckEmailResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface CheckEmailResponseData
 */
export interface CheckEmailResponseData {
  /**
   * Email exists
   * @type {boolean}
   * @memberof CheckEmailResponseData
   */
  exists: boolean;
}
/**
 *
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
  /**
   * User name
   * @type {string}
   * @memberof CreateUserDto
   */
  name: string;
  /**
   * User email
   * @type {string}
   * @memberof CreateUserDto
   */
  email: string;
  /**
   * User password
   * @type {string}
   * @memberof CreateUserDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
  /**
   *
   * @type {CreateUserResponseData}
   * @memberof CreateUserResponse
   */
  data: CreateUserResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof CreateUserResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof CreateUserResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface CreateUserResponseData
 */
export interface CreateUserResponseData {
  /**
   * User id
   * @type {string}
   * @memberof CreateUserResponseData
   */
  id: string;
  /**
   * User name
   * @type {string}
   * @memberof CreateUserResponseData
   */
  name: string;
  /**
   * User email
   * @type {string}
   * @memberof CreateUserResponseData
   */
  email: string;
  /**
   * User password
   * @type {string}
   * @memberof CreateUserResponseData
   */
  password: string;
  /**
   * User status
   * @type {boolean}
   * @memberof CreateUserResponseData
   */
  status: boolean;
  /**
   * User created date
   * @type {string}
   * @memberof CreateUserResponseData
   */
  createdAt: string;
  /**
   * User updated date
   * @type {string}
   * @memberof CreateUserResponseData
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
  /**
   *
   * @type {GetUserResponseData}
   * @memberof GetUserResponse
   */
  data: GetUserResponseData;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof GetUserResponse
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof GetUserResponse
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface GetUserResponseData
 */
export interface GetUserResponseData {
  /**
   * User id
   * @type {string}
   * @memberof GetUserResponseData
   */
  id: string;
  /**
   * User name
   * @type {string}
   * @memberof GetUserResponseData
   */
  name: string;
  /**
   * User email
   * @type {string}
   * @memberof GetUserResponseData
   */
  email: string;
  /**
   * User password
   * @type {string}
   * @memberof GetUserResponseData
   */
  password: string;
  /**
   * User status
   * @type {boolean}
   * @memberof GetUserResponseData
   */
  status: boolean;
  /**
   * User created date
   * @type {string}
   * @memberof GetUserResponseData
   */
  createdAt: string;
  /**
   * User updated date
   * @type {string}
   * @memberof GetUserResponseData
   */
  updatedAt: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const HttpStatus = {
  NUMBER_100: 100,
  NUMBER_101: 101,
  NUMBER_102: 102,
  NUMBER_103: 103,
  NUMBER_200: 200,
  NUMBER_201: 201,
  NUMBER_202: 202,
  NUMBER_203: 203,
  NUMBER_204: 204,
  NUMBER_205: 205,
  NUMBER_206: 206,
  NUMBER_300: 300,
  NUMBER_301: 301,
  NUMBER_302: 302,
  NUMBER_303: 303,
  NUMBER_304: 304,
  NUMBER_307: 307,
  NUMBER_308: 308,
  NUMBER_400: 400,
  NUMBER_401: 401,
  NUMBER_402: 402,
  NUMBER_403: 403,
  NUMBER_404: 404,
  NUMBER_405: 405,
  NUMBER_406: 406,
  NUMBER_407: 407,
  NUMBER_408: 408,
  NUMBER_409: 409,
  NUMBER_410: 410,
  NUMBER_411: 411,
  NUMBER_412: 412,
  NUMBER_413: 413,
  NUMBER_414: 414,
  NUMBER_415: 415,
  NUMBER_416: 416,
  NUMBER_417: 417,
  NUMBER_418: 418,
  NUMBER_421: 421,
  NUMBER_422: 422,
  NUMBER_424: 424,
  NUMBER_428: 428,
  NUMBER_429: 429,
  NUMBER_500: 500,
  NUMBER_501: 501,
  NUMBER_502: 502,
  NUMBER_503: 503,
  NUMBER_504: 504,
  NUMBER_505: 505,
} as const;

export type HttpStatus = (typeof HttpStatus)[keyof typeof HttpStatus];

/**
 *
 * @export
 * @interface ResponseDto
 */
export interface ResponseDto {
  /**
   *
   * @type {object}
   * @memberof ResponseDto
   */
  data: object | null;
  /**
   *
   * @type {ResponseDtoError}
   * @memberof ResponseDto
   */
  error: ResponseDtoError | null;
  /**
   *
   * @type {HttpStatus}
   * @memberof ResponseDto
   */
  status: HttpStatus;
}

/**
 *
 * @export
 * @interface ResponseDtoError
 */
export interface ResponseDtoError {
  /**
   *
   * @type {ResponseErrorCode}
   * @memberof ResponseDtoError
   */
  code: ResponseErrorCode;
  /**
   *
   * @type {string}
   * @memberof ResponseDtoError
   */
  message: string;
  /**
   *
   * @type {ResponseErrorError}
   * @memberof ResponseDtoError
   */
  error: ResponseErrorError;
}
/**
 *
 * @export
 * @interface ResponseError
 */
export interface ResponseError {
  /**
   *
   * @type {ResponseErrorCode}
   * @memberof ResponseError
   */
  code: ResponseErrorCode;
  /**
   *
   * @type {string}
   * @memberof ResponseError
   */
  message: string;
  /**
   *
   * @type {ResponseErrorError}
   * @memberof ResponseError
   */
  error: ResponseErrorError;
}
/**
 * @type ResponseErrorCode
 * @export
 */
export type ResponseErrorCode = number | string;

/**
 * @type ResponseErrorError
 * @export
 */
export type ResponseErrorError = object | string;

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkEmail: async (
      email: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists('checkEmail', 'email', email);
      const localVarPath = `/api/users/check-email/{email}`.replace(
        `{${'email'}}`,
        encodeURIComponent(String(email))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createUserDto: CreateUserDto,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createUserDto' is not null or undefined
      assertParamExists('create', 'createUserDto', createUserDto);
      const localVarPath = `/api/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUserById', 'id', id);
      const localVarPath = `/api/users/get-user-by-id/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async checkEmail(
      email: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CheckEmailResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.checkEmail(
        email,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UsersApi.checkEmail']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createUserDto: CreateUserDto,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CreateUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createUserDto,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UsersApi.create']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetUserResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(
        id,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['UsersApi.getUserById']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkEmail(email: string, options?: any): AxiosPromise<CheckEmailResponse> {
      return localVarFp
        .checkEmail(email, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {CreateUserDto} createUserDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createUserDto: CreateUserDto,
      options?: any
    ): AxiosPromise<CreateUserResponse> {
      return localVarFp
        .create(createUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(id: string, options?: any): AxiosPromise<GetUserResponse> {
      return localVarFp
        .getUserById(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {string} email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public checkEmail(email: string, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .checkEmail(email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {CreateUserDto} createUserDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public create(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .create(createUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} id User id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public getUserById(id: string, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .getUserById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
